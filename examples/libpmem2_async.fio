[global]
bs=64m
size=4g
ioengine=libpmem2_async
norandommap
time_based
group_reporting
invalidate=1
disable_lat=1
disable_slat=1
disable_clat=1
clat_percentiles=0

iodepth=1
iodepth_batch_complete_min=1
iodepth_batch_complete_max=1
thread
numjobs=1
runtime=30

#
# depends on direct option, flags are set for pmem2_memcpy_fn call:
# direct=1 - PMEM2_F_MEM_NONTEMPORAL,
# direct=0 - PMEM2_F_MEM_TEMPORAL.
#
direct=1

#
# sync=1 means that pmem_persist_fn is executed for each write operation.
#
sync=0

#
# sync_file_range=write:n means that pmem_persist_fn is executed after n write operations.
#
#sync_file_range=write:4

#
# In case of 'scramble_buffers=1', the source buffer
# is rewritten with a random value every write operation.
#
# But when 'scramble_buffers=0' is set, the source buffer isn't
# rewritten. So it will be likely that the source buffer is in CPU
# cache and it seems to be high write performance.
#
scramble_buffers=1

#
# Setting for fio process's CPU Node and Memory Node.
# Set proper node below or use `numactl` command along with FIO.
#
#numa_cpu_nodes=0
#numa_mem_policy=bind:0

#
# split means that each job will get a unique CPU from the CPU set
#
cpus_allowed_policy=split

#
# The libpmem2 engine does IO to files in a DAX-mounted filesystem.
# The filesystem should be created on a Non-Volatile DIMM (e.g /dev/pmem0)
# and then mounted with the '-o dax' option.  Note that the engine
# accesses the underlying NVDIMM directly, bypassing the kernel block
# layer, so the usual filesystem/disk performance monitoring tools such
# as iostat will not provide useful data.
#
#filename=/mnt/pmem/somefile
directory=/mnt/pmem1

[libpmem2-seqwrite]
rw=write
stonewall

#[libpmem2-seqread]
#rw=read
#stonewall

#[libpmem2-randwrite]
#rw=randwrite
#stonewall

#[libpmem2-randread]
#rw=randread
#stonewall
